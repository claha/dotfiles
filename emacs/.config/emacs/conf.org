#+TITLE: Emacs Configuration
#+AUTHOR: Claes Hallstrom
#+OPTIONS: toc:nil num:nil
#+STARTUP: overview

* Cleaning

Help keeping emacs-user-directory clean.

#+begin_src emacs-lisp
(use-package no-littering
  :ensure
  :config
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (setq custom-file (no-littering-expand-etc-file-name "custom.el")))
#+end_src

* Appearance

Configure the appearance of Emacs.

#+begin_src emacs-lisp
(use-package emacs
  :init
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (global-hl-line-mode 1)
  (show-paren-mode 1)
  (global-display-line-numbers-mode t)
  :config
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (set-window-scroll-bars (minibuffer-window) nil nil)
  (setq show-paren-delay 0.0)
  (setq column-number-mode t))
#+end_src

An opinionated pack of modern color-themes.

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure
  :init (load-theme 'doom-material t))
#+end_src

Configure mode line without icon and showing minor modes and buffer name.

#+begin_src emacs-lisp
(use-package diminish
  :ensure
  :after use-package)

(use-package all-the-icons
  :ensure)

(use-package doom-modeline
  :ensure
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-minor-modes t)
  (doom-modeline-buffer-file-name-style 'buffer-name)
  :config
  (setq doom-modeline-icon t))
#+end_src

* Completion

Better solution for incremental narrowing in Emacs.

#+begin_src emacs-lisp
(use-package selectrum
  :ensure
  :custom
  (selectrum-fix-vertical-window-height t)
  (selectrum-max-window-height 9)
  (selectrum-show-indices t)
  (selectrum-extend-current-candidate-highlight t)
  :init
  (selectrum-mode 1))
#+end_src

Simple but effective sorting and filtering for Emacs.

#+begin_src emacs-lisp
(use-package prescient
  :ensure
  :after selectrum
  :config
  (prescient-persist-mode 1))

(use-package selectrum-prescient
  :ensure
  :after prescient
  :config
  (selectrum-prescient-mode 1))
#+end_src

Marginalia in the minibuffer.

#+begin_src emacs-lisp
(use-package marginalia
  :ensure
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

Consulting completing-read.

#+begin_src emacs-lisp
(use-package consult
  :ensure
  :bind (("C-x b" . consult-buffer)
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame)
         ("M-g M-g" . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-project-imenu)
         ("M-s f" . consult-find)
         ("M-s L" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines))
  :init
  (setq register-preview-delay 0)
  (setq register-preview-function #'consult-register-format)
  (setq xref-show-xrefs-function #'consult-xref)
  (setq xref-show-definitions-function #'consult-xref)
  :config
  (recentf-mode 1)
  (setq consult-narrow-key "<")
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root))
#+end_src

Ivy - a generic completion frontend for Emacs.

#+begin_src emacs-lisp
(use-package ivy
  :disabled
  :ensure
  :defer 0.1
  :diminish ivy-mode
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "")
  (setq ivy-display-style 'fancy)
  (setq ivy-extra-directories ())
  (setq ivy-sort-matches-functions-alist
        '((t . ivy--prefix-sort)))
  (setq ivy-initial-inputs-alist nil)
  (define-key ivy-minibuffer-map (kbd "TAB") 'ivy-partial))

(use-package ivy-rich
  :disabled
  :ensure
  :after (ivy counsel)
  :config
  (setcdr (assq t ivy-format-functions-alist)
          #'ivy-format-function-line)
  (ivy-rich-mode 1))

(use-package ivy-posframe
  :disabled
  :ensure
  :after (ivy counsel)
  :diminish ivy-posframe-mode
  :custom
  (ivy-posframe-height-alist
   '((t . 20)))
  (ivy-posframe-display-functions-alist
   '((counsel-find-file . ivy-display-function-fallback)
     (ivy-completion-in-region . ivy-posframe-display-at-frame-center)
     (t . ivy-posframe-display-at-frame-center)))
  (ivy-posframe-parameters
   '((left-fringe . 4)
     (right-fringe . 4)))
  :config
  (ivy-posframe-mode 1))

(use-package counsel
  :disabled
  :ensure
  :after ivy
  :diminish counsel-mode
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         ("C-c i" . counsel-imenu)
         ("C-x C-r" . counsel-recentf))
  :config
  (counsel-mode 1)
  (setq counsel-find-file-ignore-regexp
          (concat
           ;; file names beginning with #
           "\\(?:\\`[#]\\)"
           ;; file names ending with # or ~
           "\\|\\(?:[#~]\\'\\)")))
#+end_src

Configure dabbrev.

#+begin_src emacs-lisp
(use-package dabbrev
  :custom
  (dabbrev-abbrev-char-regexp nil)
  (dabbrev-backward-only nil)
  (dabbrev-case-distinction nil)
  (dabbrev-case-fold-search t)
  (dabbrev-case-replace nil)
  (dabbrev-eliminate-newlines nil)
  (dabbrev-upcase-means-case-search t)
  :config
  (global-set-key (kbd "C-.") 'dabbrev-expand)
  (global-set-key (kbd "C-:")
                  '(lambda()
                     (interactive)
                     (let ((current-prefix-arg '(16)))  ;; C-u C-u
                       (call-interactively 'dabbrev-completion)))))
#+end_src

* Project

Project Interaction Library for Emacs.

#+begin_src emacs-lisp
(use-package projectile
  :ensure
  :diminish projectile-mode
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  (projectile-mode)
  (setq frame-title-format '((:eval (projectile-project-name)))))
#+end_src

Ivy UI for Projectile.

#+begin_src emacs-lisp
(use-package counsel-projectile
  :disabled
  :ensure
  :after (counsel projectile)
  :config (counsel-projectile-mode))
#+end_src

* Files

Dired, the Directory Editor.

#+begin_src emacs-lisp
(use-package dired
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-aghov --group-directories-first")))
#+end_src

* Buffers

Operate on buffers like dired.

#+begin_src emacs-lisp
(use-package ibuffer
  :bind
  (("C-x C-b" . ibuffer)
   ("C-x k" . kill-this-buffer)))
#+end_src

* Windows

Quickly switch windows in Emacs.

#+begin_src emacs-lisp
(use-package ace-window
  :ensure
  :bind ("C-x o" . ace-window)
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

* Searching/Jumping

Jump to things in Emacs tree-style.

#+begin_src emacs-lisp
(use-package avy
  :ensure
  :defer
  :init
  (avy-setup-default))
#+end_src

An Emacs frontend to The Silver Searcher.

#+begin_src emacs-lisp
(use-package ag
  :ensure
  :commands ag)
#+end_src

Emacs search tool based on ripgrep.

#+begin_src emacs-lisp
(use-package rg
  :ensure
  :commands rg)
#+end_src

An Emacs "jump to definition" package for 40+ languages.

#+begin_src emacs-lisp
(use-package dumb-jump
  :ensure
  :config
  (setq dumb-jump-force-searcher 'ag)
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src

* Version Control

It's Magit! A Git porcelain inside Emacs.

#+begin_src emacs-lisp
(use-package magit
  :ensure
  :custom
  (magit-display-buffer-function
   #'magit-display-buffer-fullframe-status-v1)
  :bind (("C-c g" . magit-status)))

(use-package git-commit
  :ensure
  :after magit
  :config
  (setq git-commit-summary-max-length 50)
  (add-hook 'git-commit-mode-hook
            '(lambda ()
               (setq fill-column 72)
               (setq-local comment-auto-fill-only-comments nil))))
#+end_src

Work with Git forges from the comfort of Magit.

#+begin_src emacs-lisp
(use-package forge
  :after magit
  :ensure)
#+end_src

Example of ~/.authinfo for github.

#+begin_example conf
machine api.github.com login claha^forge password TOKEN
#+end_example

Emacs package for highlighting uncommitted changes

#+begin_src emacs-lisp
(use-package diff-hl
  :ensure
  :hook ((prog-mode . diff-hl-mode)
         (org-mode . diff-hl-mode)
         (dired-mode . diff-hl-dired-mode))
  :custom
  (diff-hl-side 'right))
#+end_src

* Editing

Convert the region to lower or upper case.

#+begin_src emacs-lisp
(use-package emacs
  :config
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil))
#+end_src

Restrict editing in this buffer to the current region.

#+begin_src emacs-lisp
(use-package emacs
  :config
  (put 'narrow-to-region 'disabled nil))
#+end_src

Enables hungry deletion in all modes.

#+begin_src emacs-lisp
(use-package hungry-delete
  :ensure
  :diminish hungry-delete-mode
  :config
  (global-hungry-delete-mode)
  (setq hungry-delete-join-reluctantly t))
#+end_src

* Programming

Tabs are evil, use 4 spaces as default.

#+begin_src emacs-lisp
(use-package emacs
  :config
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4))
#+end_src

Emacs client/library for the Language Server Protocol.

#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))
#+end_src

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure
  :defer t)

(use-package cmake-mode
  :ensure
  :defer t)

(use-package flycheck
  :ensure
  :diminish flycheck-mode
  :init
  (global-flycheck-mode))
#+end_src

Setup how compilation should behave.

#+begin_src emacs-lisp
(use-package emacs
  :config
  (setq-default compilation-ask-about-save nil)
  (setq-default compilation-always-kill t)
  (setq-default compilation-scroll-output 'first-error))
#+end_src

# Colorize compilation buffer.

# #+begin_src emacs-lisp
#   (use-package ansi-color
#     :ensure
#     :config (add-hook 'compilation-filter-hook 'colorize-compilation-buffer))

#   (defun colorize-compilation-buffer ()
#     (ansi-color-apply-on-region compilation-filter-start (point)))
# #+end_src

Configure c/c++ indentation.

#+begin_src emacs-lisp
(use-package emacs
  :config
  (setq c-default-style "linux" c-basic-offset 2)
  (c-set-offset 'case-label '+))
#+end_src

Diminish eldoc-mode.

#+begin_src emacs-lisp
(use-package eldoc
  :diminish eldoc-mode)
#+end_src

* Shell/Terminal

Hide line numbers in terminals and shells.

#+begin_src emacs-lisp
(use-package shell
  :commands shell
  :config
  (add-hook 'shell-mode-hook (lambda () (display-line-numbers-mode 0))))

(use-package eshell
  :commands eshell
  :config
  (add-hook 'eshell-mode-hook (lambda () (display-line-numbers-mode 0))))

(use-package term
  :commands term
  :config
  (add-hook 'term-mode-hook (lambda () (display-line-numbers-mode 0))))
#+end_src

* Org mode

Org mode is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.

#+begin_src emacs-lisp
(use-package org
  :config
  (defun org-mode-setup ()
    (display-line-numbers-mode 0)
    (visual-line-mode 1)
    (org-indent-mode))
  (setq org-ellipsis " ▾")
  (setq org-hide-emphasis-markers t)
  :hook (org-mode . org-mode-setup))
#+end_src

UTF-8 bullets for org-mode.

#+begin_src emacs-lisp
(use-package org-bullets
  :ensure
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

Configure org source code blocks.

#+begin_src emacs-lisp
(use-package org-src
  :after org
  :config
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-src-tab-acts-natively t))
#+end_src

* Help

Emacs package that displays available keybindings in popup.

#+begin_src emacs-lisp
(use-package which-key
  :ensure
  :diminish which-key-mode
  :custom
  (which-key-idle-delay 0.25)
  :init (which-key-mode))
#+end_src

A better Emacs *help* buffer.

#+begin_src emacs-lisp
(use-package helpful
  :ensure
  :after counsel
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Miscellaneous

Miscellaneous packages.

#+begin_src emacs-lisp
(use-package hydra
  :ensure
  :defer t)
#+end_src

Use qutebrowser to browse.

#+begin_src emacs-lisp
(use-package emacs
  :config
  (setq browse-url-browser-function 'browse-url-generic)
  (setq browse-url-generic-program "qutebrowser"))
#+end_src

Writing 'yes/no' takes to much time...

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq large-file-warning-threshold nil)
  (setq vc-follow-symlinks t)
  (setq visible-bell t))
#+end_src

* Multimedia

An Emacs web feeds client.

#+begin_src emacs-lisp
(use-package elfeed
  :ensure
  :commands elfeed
  :bind
  (:map elfeed-search-mode-map
        ("v" . elfeed-search-mpv)
        :map elfeed-show-mode-map
        ("v" . elfeed-show-mpv))
  :config
  (defun elfeed-search-mpv ()
    "Open the current entry in mpv."
    (interactive)
    (let ((entry (car (elfeed-search-selected)))
          (url (elfeed-entry-link (car (elfeed-search-selected)))))
      (elfeed-untag entry 'unread)
      (start-process "*elfeed-mpv*" nil "mpv" url)
      (elfeed-search-update-entry entry)
      (unless elfeed-search-remain-on-entry
        (forward-line))))

  (defun elfeed-show-mpv ()
    "Open the current entry in mpv."
    (interactive)
    (let ((url (elfeed-entry-link elfeed-show-entry)))
      (start-process "*elfeed-mpv*" nil "mpv" url))))
#+end_src

* Private

Load private file if it exists and is readable.

#+begin_src emacs-lisp
  (if (file-readable-p (expand-file-name "private.el" user-emacs-directory))
      (load-file (expand-file-name "private.el" user-emacs-directory)))
#+end_src
